{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction PyPerp is a Python SDK for Perpetual Protocol. pyperp v2 interfaces with Perpetual Protocol v2 Curie. Installation pip install pyperp","title":"Introduction"},{"location":"#introduction","text":"PyPerp is a Python SDK for Perpetual Protocol. pyperp v2 interfaces with Perpetual Protocol v2 Curie.","title":"Introduction"},{"location":"#installation","text":"pip install pyperp","title":"Installation"},{"location":"common/","text":"common Contains types and utility functions types GasParams This is a dataclass used to define gas parameters in transactions Importing from pyperp.common.types import GasParams Fields gas : gas value. Defaults to None gas_price : gasPrice. Defaults to None maxFeePerGas : maxFeePerGas. Defaults to None maxPriorityFeePerGas : maxProrityFeePerGas. Defaults to None utils getDeadline Importing from pyperp.common.utils import getDeadline A function to get dealine in UNIX time. It takes number of seconds as argument and returns UNIX time at given number of seconds later from the time of function call Arguments: expiry_seconds : Number of seconds to add to the deadline from the time of function call","title":"Common"},{"location":"common/#common","text":"Contains types and utility functions","title":"common"},{"location":"common/#types","text":"","title":"types"},{"location":"common/#gasparams","text":"This is a dataclass used to define gas parameters in transactions","title":"GasParams"},{"location":"common/#importing","text":"from pyperp.common.types import GasParams","title":"Importing"},{"location":"common/#fields","text":"gas : gas value. Defaults to None gas_price : gasPrice. Defaults to None maxFeePerGas : maxFeePerGas. Defaults to None maxPriorityFeePerGas : maxProrityFeePerGas. Defaults to None","title":"Fields"},{"location":"common/#utils","text":"","title":"utils"},{"location":"common/#getdeadline","text":"","title":"getDeadline"},{"location":"common/#importing_1","text":"from pyperp.common.utils import getDeadline A function to get dealine in UNIX time. It takes number of seconds as argument and returns UNIX time at given number of seconds later from the time of function call Arguments: expiry_seconds : Number of seconds to add to the deadline from the time of function call","title":"Importing"},{"location":"contracts/","text":"Contracts Contract classes interfaces with smart contracts of v2 curie AccountBalance The AccountBalance class interfaces with the AccountBalance contract Importing from pyperp.contracts import AccountBalance Properties account_balance : Web3.eth.contract() object for AccountBalance contract Methods get_base_tokens Returns a list of base tokens owned by trader Arguments: trader : Wallet address of trader get_account_info Returns account info of trader with respect to a base token Arguments: trader : wallet address of trader base_token : contract address of base token Return Value: Returns pyperp.contracts.types.AccountMarketInfo object get_taker_open_notional Returns taker open notional of trader with respect to a base token Arguments: trader : wallet address of trader base_token : contract address of base token get_total_open_notional Returns total open notional of trader with respect to a base token Arguments: trader : wallet address of trader base_token : contract address of base token get_total_debt_value Returns total debt value of a trader Arguments: trader : wallet address of trader get_marginal_requirement_for_liquidation Returns marginal requirement for liquidation Arguments: trader : wallet address of trader get_pnl_and_pending_fee Returns PNL and Pending fee for a trader Arguments: trader : wallet address of trader Return Value: Returns a dict of the following format: { 'owed_realized_pnl': <INT_VALUE>, 'unrealized_pnl': <INT_VALUE>, 'pending_fee':<INT_VALUE> } has_order Checks if a trader has an open order Arguments: trader : wallet address of trader Return Value: True : If there are open orders False : If there are no open orders has_order_in_open_or_closed_market Checks if a trader has orders in open or closed market Arguments: trader : wallet address of trader Return Value: True : If there are orders False : If there are no orders get_base Return amount of base token owned in terms of base Arguments: trader : wallet address of trader base_token : contract address of base token get_quote Return amount of base token owned in terms of quote Arguments: trader : wallet address of trader base_token : contract address of base token get_taker_position_size Returns taker position size Arguments: trader : wallet address of trader base_token : contract address of base token get_total_position_size Returns total position size Arguments: trader : wallet address of trader base_token : contract address of base token get_total_position_value Returns total position value Arguments: trader : wallet address of trader base_token : contract address of base token get_total_abs_positon_value Returns total absolute position value Arguments: trader : wallet address of trader settle_pnl_closed_market Settle PNL in closed market Arguments: trader : wallet address of trader base_token : contract address of base token ClearingHouse This class interfaces with the ClearingHouse contract Importing from pyperp.contracts import ClearingHouse Properties clearing_house : Web3.eth.contract() object for ClearingHouse contract usdc : Web3.eth.contract() object for USDC contract vbtc : Web3.eth.contract() object for vBTC contract veth : Web3.eth.contract() object for vETH contract Methods add_liquidity Add liquidity to a token Arguments: params : AddLiquidityParams object gas_params : GasParams object remove_liquidity Remove liquidity from a token Arguments: params : RemoveLiquidityParams object gas_params : GasParams object settle_all_funding Settle all funding Arguments: trader : wallet address of trader gas_params : GasParams object\\ open_position Open Position Arguments: params : OpenPositionParams object gas_params : GasParams object close_position Close position Arguments: params : ClosePosition object gas_params : GasParams object liquidate Liquidate Arguments: trader : wallet address of trader base_token : contract address of base token gas_params : GasParams object cancel_all_excess_order Cancel all excess orders Arguments: maker : wallet address of maker base_token : contract address of base token gas_params : GasParams object close_position_in_closed_market Close position in closed market Arguments: trader : wallet address of trader base_token : contract address of base token gas_params : GasParams object uniswap_v3_mint_callback Uniswap V3 mint callback Arguments: amount0Owed : integer amount1owed : integer data : string gas_parmas : A GasParams object uniswap_v3_swap_callback Uniswap V3 swap callback Arguments: amount0Delta : integer amount1Delta : integer data : string gas_params : GasParams object get_quote_token Returns quote token contract address get_uniswap_v3_factory Returns UniswapV3Factory contract address get_clearing_house_config Return ClearingHouseConfig contract adderss get_vault Return Vault contract address get_exchange Return Exchange contract address get_order_book Return OrderBook contract address get_account_balance Return AccountBalance contract address get_insurance_fund Return InsuranceFund contract address get_account_value Return account value of a trader Arguments: trader : wallet address of trader MarketRegistry This class interfaces with the MarketRegistry smart contract Importing from pyperp.contracts import MarketRegistry Properties market_registry : Web3.eth.contract object for MarketRegistry contract Methods get_quote_token Returns quote token contract address get_uniswap_v3_factory Returns UniswapV3Factory contract address get_max_order_per_market Returns maximum orders per market get_pool Returns pool address of a base token Arguments: base_token : contract address of base token get_insurance_fund_fee_ratio Returns insurance fund fee ratio for a base token Arguments: base_token : contract address of base token get_market_info Returns market info for a base token Arguments: base_token : contract address of base token Return Value: A pyperp.contracts.types.MarketInfo object OrderBook This class interfaces with the OrderBook smart contract Importing from pyperp.contracts import OrderBook Properties order_book : Web3.eth.contract object for OrderBook contract Methods get_exchange Returns Exchange contract address get_open_order_ids Returns open order ids of a trader with respect to a base token Arguments: trader : wallet address of trader base_token : contract address of base token get_open_order_by_id Returns open order info Arguments: order_id : HexBytes object representing order id Return Value\": Returns pyperp.contracts.types.OpenOrderInfo object get_open_order Returns open order Arguments: trader : wallet address of a trader base_token : contract address of a base token lower_tick : lower tick upper_tick : upper tick\" Return Value: Returns pyperp.contracts.types.OpenOrderInfo object has_order Checks if a trader has any open order Arguments: trader : wallet address of a trader tokens : list of token addresses get_total_quote_balance_and_pending_fee Returns total quote balance and pending fee Arguments: trader : wallet address of trader base_token : contract address of token Return Value: Returns a dict of following format: { 'total_quote_amount_in_pools': <INT_VALUE>, 'total_pending_fee': <INT_VALUE> } get_total_token_amount_in_pool_and_pending_fee Returns total token amount and pending fee. Arguments: trader : wallet address of trader base_token : contract address of base token fetch_base : fetch base Return Value: Returns a dict of following format: { 'token_amount': <INT_VALUE>, 'pending_fee': <INT_VALUE> } get_liquidity_coefficient_in_funding_payment Returns liquidity coefficient in funding payment Arguments: trader : wallet address of trader base_token : contract address of base token funding_growth_global : FundingGrowth object\" get_pending_fee Returns pending fee. Arguments: trader : wallet address of trader base_token : contract address of base token lower_tick : lower tick upper_tick : upper tick get_total_order_debt Returns total order debt. Arguments: trader : wallet address of trader base_token : contract address of base token fetch_base : fetch base Vault This class interfaces with the Vault contract Importing from pyperp.contracts.vault import Vault Properties vault : Web3.eth.contract object of Vault contract usdc : Web3.eth.contract object of USDC contract Methods approve_vault_to_use_usdc Approves Vault contract to use USDC from trader's wallet Arguments: gas_params : A pyperp.common.types.GasParams object deposit Deposit collateral amount. Arguments: token : Token address amount_x10_D : amount to deposit gas_params : A pyperp.common.types.GasParams object deposit_for Deposit collateral for a different address. Arguments: to : wallet address to deposit to token : contract address of token amount_x10_D : amount to deposit gas_params : A pyperp.common.types.GasParams object withdraw Withdraw collateral amount. Arguments: token : Token address amount_x10_D : amount to withdraw gas_params : GasParams object get_settlement_token Returns settlement token address. decimals Returns number of decimals. get_total_debt Returns total debt. get_clearing_house_config Returns contract address of ClearingHouseConfig. get_account_balance Returns contract address of AccountBalance get_insurance_fund Returns contract address of InsuranceFund get_exchange Returns contract address of Exchange get_clearing_house Returns contract address of ClearingHouse get_free_collateral Check how much collateral a trader can withdraw. Arguments: trader : wallet adderss of trader get_balance Returns vault balance of trader. Arguments: trader : wallet address of trader get_free_collateral_by_ratio Returns free collateral by ratio. Arguments: trader : wallet address of trader ratio : ratio types Contains dataclasses for use in parameters and return types OpenPositionParams Used as parameter in pyperp.contracts.ClearingHouse.open_position() function Importing from pyperp.contracts.types import OpenPositionParams Fields base_token : base token address is_base_to_quote : Boolean. Takes True or False . is_exact_input : Boolean. Takes True or False . amount : integer amount value. opposite_amount_bound : integer OppositeAmountBound value deadline : UNIX time to be used as deadline for trade sqrt_price_limit_x96 : integer sqrtPriceLimitX96 value referral_code : HexBytes representing ReferralCode . Defaults to 0. ClosePositionParams Used as parameter in pyperp.contracts.ClearingHouse.close_position() function Importing from pyperp.contracts.types import ClosePositionParams Fields base_token : base token address sqrt_price_limit_x96 : integer sqrtPriceLimitX96 value opposite_amount_bound : integer OppositeAmountBound value deadline : UNIX time to be used as deadline for trade referral_code : HexBytes representing ReferralCode . Defaults to 0. AddLiquidityParams Used as parameter in pyperp.contracts.ClearingHouse.add_liquidity() function Importing from pyperp.contracts.types import AddLiquidityParams Fields base_token : Contract address of base token base : base amount to add quote : quote amount to add lower_tick : lowerTick value upper_tick : upperTick value min_base : minBase value min_quote : minQuote value deadline : UNIX time to be used as deadline for trade RemoveLiquidityParams Used as parameter in pyperp.contracts.ClearingHouse.remove_liquidity() function Importing from pyperp.contracts.types import RemoveLiquidityParams Fields base_token : Contract address of base token lower_tick : lowerTick value upper_tick : upperTick value liquidity : integer liquidity value min_base : minBase value min_quote : minQuote value deadline : UNIX time to be used as deadline for trade MarketInfo Used as return type in pyperp.contracts.MarketRegistry.get_market_info() Importing from pyperp.contracts.types import MarketInfo Fields pool : Pool address exchange_fee_ratio : Exchange Fee ratio uniswap_fee_ratio : Uniswap Fee ratio insurance_fund_fee_ratio : Insurance Fund Fee Ratio OpenOrderInfo Used as return type in pyperp.contracts.OrderBook.get_open_order() and pyperp.contracts.OrderBook.get_open_order_by_id() Importing from pyperp.contracts.types import OpenOrderInfo Fields liquidity : Integer liquidity value lower_tick : lowerTick value upper_tick : upperTick value last_fee_growth_inside_x96 : lastFeeGrowthInsideX96 value last_tw_premium_growth_inside_x96 : lastTwPremiumGrowthInsideX96 value last_tw_premium_div_by_sqrt_price_growth_inside_x96 : lastTwPremiumDivBySqrtPriceGrowthInsideX96 value base_debt : Base debt value quote_debt : Quote debt value","title":"Contracts"},{"location":"contracts/#contracts","text":"Contract classes interfaces with smart contracts of v2 curie","title":"Contracts"},{"location":"contracts/#accountbalance","text":"The AccountBalance class interfaces with the AccountBalance contract","title":"AccountBalance"},{"location":"contracts/#importing","text":"from pyperp.contracts import AccountBalance","title":"Importing"},{"location":"contracts/#properties","text":"account_balance : Web3.eth.contract() object for AccountBalance contract","title":"Properties"},{"location":"contracts/#methods","text":"","title":"Methods"},{"location":"contracts/#get_base_tokens","text":"Returns a list of base tokens owned by trader Arguments: trader : Wallet address of trader","title":"get_base_tokens"},{"location":"contracts/#get_account_info","text":"Returns account info of trader with respect to a base token Arguments: trader : wallet address of trader base_token : contract address of base token Return Value: Returns pyperp.contracts.types.AccountMarketInfo object","title":"get_account_info"},{"location":"contracts/#get_taker_open_notional","text":"Returns taker open notional of trader with respect to a base token Arguments: trader : wallet address of trader base_token : contract address of base token","title":"get_taker_open_notional"},{"location":"contracts/#get_total_open_notional","text":"Returns total open notional of trader with respect to a base token Arguments: trader : wallet address of trader base_token : contract address of base token","title":"get_total_open_notional"},{"location":"contracts/#get_total_debt_value","text":"Returns total debt value of a trader Arguments: trader : wallet address of trader","title":"get_total_debt_value"},{"location":"contracts/#get_marginal_requirement_for_liquidation","text":"Returns marginal requirement for liquidation Arguments: trader : wallet address of trader","title":"get_marginal_requirement_for_liquidation"},{"location":"contracts/#get_pnl_and_pending_fee","text":"Returns PNL and Pending fee for a trader Arguments: trader : wallet address of trader Return Value: Returns a dict of the following format: { 'owed_realized_pnl': <INT_VALUE>, 'unrealized_pnl': <INT_VALUE>, 'pending_fee':<INT_VALUE> }","title":"get_pnl_and_pending_fee"},{"location":"contracts/#has_order","text":"Checks if a trader has an open order Arguments: trader : wallet address of trader Return Value: True : If there are open orders False : If there are no open orders","title":"has_order"},{"location":"contracts/#has_order_in_open_or_closed_market","text":"Checks if a trader has orders in open or closed market Arguments: trader : wallet address of trader Return Value: True : If there are orders False : If there are no orders","title":"has_order_in_open_or_closed_market"},{"location":"contracts/#get_base","text":"Return amount of base token owned in terms of base Arguments: trader : wallet address of trader base_token : contract address of base token","title":"get_base"},{"location":"contracts/#get_quote","text":"Return amount of base token owned in terms of quote Arguments: trader : wallet address of trader base_token : contract address of base token","title":"get_quote"},{"location":"contracts/#get_taker_position_size","text":"Returns taker position size Arguments: trader : wallet address of trader base_token : contract address of base token","title":"get_taker_position_size"},{"location":"contracts/#get_total_position_size","text":"Returns total position size Arguments: trader : wallet address of trader base_token : contract address of base token","title":"get_total_position_size"},{"location":"contracts/#get_total_position_value","text":"Returns total position value Arguments: trader : wallet address of trader base_token : contract address of base token","title":"get_total_position_value"},{"location":"contracts/#get_total_abs_positon_value","text":"Returns total absolute position value Arguments: trader : wallet address of trader","title":"get_total_abs_positon_value"},{"location":"contracts/#settle_pnl_closed_market","text":"Settle PNL in closed market Arguments: trader : wallet address of trader base_token : contract address of base token","title":"settle_pnl_closed_market"},{"location":"contracts/#clearinghouse","text":"This class interfaces with the ClearingHouse contract","title":"ClearingHouse"},{"location":"contracts/#importing_1","text":"from pyperp.contracts import ClearingHouse","title":"Importing"},{"location":"contracts/#properties_1","text":"clearing_house : Web3.eth.contract() object for ClearingHouse contract usdc : Web3.eth.contract() object for USDC contract vbtc : Web3.eth.contract() object for vBTC contract veth : Web3.eth.contract() object for vETH contract","title":"Properties"},{"location":"contracts/#methods_1","text":"","title":"Methods"},{"location":"contracts/#add_liquidity","text":"Add liquidity to a token Arguments: params : AddLiquidityParams object gas_params : GasParams object","title":"add_liquidity"},{"location":"contracts/#remove_liquidity","text":"Remove liquidity from a token Arguments: params : RemoveLiquidityParams object gas_params : GasParams object","title":"remove_liquidity"},{"location":"contracts/#settle_all_funding","text":"Settle all funding Arguments: trader : wallet address of trader gas_params : GasParams object\\","title":"settle_all_funding"},{"location":"contracts/#open_position","text":"Open Position Arguments: params : OpenPositionParams object gas_params : GasParams object","title":"open_position"},{"location":"contracts/#close_position","text":"Close position Arguments: params : ClosePosition object gas_params : GasParams object","title":"close_position"},{"location":"contracts/#liquidate","text":"Liquidate Arguments: trader : wallet address of trader base_token : contract address of base token gas_params : GasParams object","title":"liquidate"},{"location":"contracts/#cancel_all_excess_order","text":"Cancel all excess orders Arguments: maker : wallet address of maker base_token : contract address of base token gas_params : GasParams object","title":"cancel_all_excess_order"},{"location":"contracts/#close_position_in_closed_market","text":"Close position in closed market Arguments: trader : wallet address of trader base_token : contract address of base token gas_params : GasParams object","title":"close_position_in_closed_market"},{"location":"contracts/#uniswap_v3_mint_callback","text":"Uniswap V3 mint callback Arguments: amount0Owed : integer amount1owed : integer data : string gas_parmas : A GasParams object","title":"uniswap_v3_mint_callback"},{"location":"contracts/#uniswap_v3_swap_callback","text":"Uniswap V3 swap callback Arguments: amount0Delta : integer amount1Delta : integer data : string gas_params : GasParams object","title":"uniswap_v3_swap_callback"},{"location":"contracts/#get_quote_token","text":"Returns quote token contract address","title":"get_quote_token"},{"location":"contracts/#get_uniswap_v3_factory","text":"Returns UniswapV3Factory contract address","title":"get_uniswap_v3_factory"},{"location":"contracts/#get_clearing_house_config","text":"Return ClearingHouseConfig contract adderss","title":"get_clearing_house_config"},{"location":"contracts/#get_vault","text":"Return Vault contract address","title":"get_vault"},{"location":"contracts/#get_exchange","text":"Return Exchange contract address","title":"get_exchange"},{"location":"contracts/#get_order_book","text":"Return OrderBook contract address","title":"get_order_book"},{"location":"contracts/#get_account_balance","text":"Return AccountBalance contract address","title":"get_account_balance"},{"location":"contracts/#get_insurance_fund","text":"Return InsuranceFund contract address","title":"get_insurance_fund"},{"location":"contracts/#get_account_value","text":"Return account value of a trader Arguments: trader : wallet address of trader","title":"get_account_value"},{"location":"contracts/#marketregistry","text":"This class interfaces with the MarketRegistry smart contract","title":"MarketRegistry"},{"location":"contracts/#importing_2","text":"from pyperp.contracts import MarketRegistry","title":"Importing"},{"location":"contracts/#properties_2","text":"market_registry : Web3.eth.contract object for MarketRegistry contract","title":"Properties"},{"location":"contracts/#methods_2","text":"","title":"Methods"},{"location":"contracts/#get_quote_token_1","text":"Returns quote token contract address","title":"get_quote_token"},{"location":"contracts/#get_uniswap_v3_factory_1","text":"Returns UniswapV3Factory contract address","title":"get_uniswap_v3_factory"},{"location":"contracts/#get_max_order_per_market","text":"Returns maximum orders per market","title":"get_max_order_per_market"},{"location":"contracts/#get_pool","text":"Returns pool address of a base token Arguments: base_token : contract address of base token","title":"get_pool"},{"location":"contracts/#get_insurance_fund_fee_ratio","text":"Returns insurance fund fee ratio for a base token Arguments: base_token : contract address of base token","title":"get_insurance_fund_fee_ratio"},{"location":"contracts/#get_market_info","text":"Returns market info for a base token Arguments: base_token : contract address of base token Return Value: A pyperp.contracts.types.MarketInfo object","title":"get_market_info"},{"location":"contracts/#orderbook","text":"This class interfaces with the OrderBook smart contract","title":"OrderBook"},{"location":"contracts/#importing_3","text":"from pyperp.contracts import OrderBook","title":"Importing"},{"location":"contracts/#properties_3","text":"order_book : Web3.eth.contract object for OrderBook contract","title":"Properties"},{"location":"contracts/#methods_3","text":"","title":"Methods"},{"location":"contracts/#get_exchange_1","text":"Returns Exchange contract address","title":"get_exchange"},{"location":"contracts/#get_open_order_ids","text":"Returns open order ids of a trader with respect to a base token Arguments: trader : wallet address of trader base_token : contract address of base token","title":"get_open_order_ids"},{"location":"contracts/#get_open_order_by_id","text":"Returns open order info Arguments: order_id : HexBytes object representing order id Return Value\": Returns pyperp.contracts.types.OpenOrderInfo object","title":"get_open_order_by_id"},{"location":"contracts/#get_open_order","text":"Returns open order Arguments: trader : wallet address of a trader base_token : contract address of a base token lower_tick : lower tick upper_tick : upper tick\" Return Value: Returns pyperp.contracts.types.OpenOrderInfo object","title":"get_open_order"},{"location":"contracts/#has_order_1","text":"Checks if a trader has any open order Arguments: trader : wallet address of a trader tokens : list of token addresses","title":"has_order"},{"location":"contracts/#get_total_quote_balance_and_pending_fee","text":"Returns total quote balance and pending fee Arguments: trader : wallet address of trader base_token : contract address of token Return Value: Returns a dict of following format: { 'total_quote_amount_in_pools': <INT_VALUE>, 'total_pending_fee': <INT_VALUE> }","title":"get_total_quote_balance_and_pending_fee"},{"location":"contracts/#get_total_token_amount_in_pool_and_pending_fee","text":"Returns total token amount and pending fee. Arguments: trader : wallet address of trader base_token : contract address of base token fetch_base : fetch base Return Value: Returns a dict of following format: { 'token_amount': <INT_VALUE>, 'pending_fee': <INT_VALUE> }","title":"get_total_token_amount_in_pool_and_pending_fee"},{"location":"contracts/#get_liquidity_coefficient_in_funding_payment","text":"Returns liquidity coefficient in funding payment Arguments: trader : wallet address of trader base_token : contract address of base token funding_growth_global : FundingGrowth object\"","title":"get_liquidity_coefficient_in_funding_payment"},{"location":"contracts/#get_pending_fee","text":"Returns pending fee. Arguments: trader : wallet address of trader base_token : contract address of base token lower_tick : lower tick upper_tick : upper tick","title":"get_pending_fee"},{"location":"contracts/#get_total_order_debt","text":"Returns total order debt. Arguments: trader : wallet address of trader base_token : contract address of base token fetch_base : fetch base","title":"get_total_order_debt"},{"location":"contracts/#vault","text":"This class interfaces with the Vault contract","title":"Vault"},{"location":"contracts/#importing_4","text":"from pyperp.contracts.vault import Vault","title":"Importing"},{"location":"contracts/#properties_4","text":"vault : Web3.eth.contract object of Vault contract usdc : Web3.eth.contract object of USDC contract","title":"Properties"},{"location":"contracts/#methods_4","text":"","title":"Methods"},{"location":"contracts/#approve_vault_to_use_usdc","text":"Approves Vault contract to use USDC from trader's wallet Arguments: gas_params : A pyperp.common.types.GasParams object","title":"approve_vault_to_use_usdc"},{"location":"contracts/#deposit","text":"Deposit collateral amount. Arguments: token : Token address amount_x10_D : amount to deposit gas_params : A pyperp.common.types.GasParams object","title":"deposit"},{"location":"contracts/#deposit_for","text":"Deposit collateral for a different address. Arguments: to : wallet address to deposit to token : contract address of token amount_x10_D : amount to deposit gas_params : A pyperp.common.types.GasParams object","title":"deposit_for"},{"location":"contracts/#withdraw","text":"Withdraw collateral amount. Arguments: token : Token address amount_x10_D : amount to withdraw gas_params : GasParams object","title":"withdraw"},{"location":"contracts/#get_settlement_token","text":"Returns settlement token address.","title":"get_settlement_token"},{"location":"contracts/#decimals","text":"Returns number of decimals.","title":"decimals"},{"location":"contracts/#get_total_debt","text":"Returns total debt.","title":"get_total_debt"},{"location":"contracts/#get_clearing_house_config_1","text":"Returns contract address of ClearingHouseConfig.","title":"get_clearing_house_config"},{"location":"contracts/#get_account_balance_1","text":"Returns contract address of AccountBalance","title":"get_account_balance"},{"location":"contracts/#get_insurance_fund_1","text":"Returns contract address of InsuranceFund","title":"get_insurance_fund"},{"location":"contracts/#get_exchange_2","text":"Returns contract address of Exchange","title":"get_exchange"},{"location":"contracts/#get_clearing_house","text":"Returns contract address of ClearingHouse","title":"get_clearing_house"},{"location":"contracts/#get_free_collateral","text":"Check how much collateral a trader can withdraw. Arguments: trader : wallet adderss of trader","title":"get_free_collateral"},{"location":"contracts/#get_balance","text":"Returns vault balance of trader. Arguments: trader : wallet address of trader","title":"get_balance"},{"location":"contracts/#get_free_collateral_by_ratio","text":"Returns free collateral by ratio. Arguments: trader : wallet address of trader ratio : ratio","title":"get_free_collateral_by_ratio"},{"location":"contracts/#types","text":"Contains dataclasses for use in parameters and return types","title":"types"},{"location":"contracts/#openpositionparams","text":"Used as parameter in pyperp.contracts.ClearingHouse.open_position() function","title":"OpenPositionParams"},{"location":"contracts/#importing_5","text":"from pyperp.contracts.types import OpenPositionParams","title":"Importing"},{"location":"contracts/#fields","text":"base_token : base token address is_base_to_quote : Boolean. Takes True or False . is_exact_input : Boolean. Takes True or False . amount : integer amount value. opposite_amount_bound : integer OppositeAmountBound value deadline : UNIX time to be used as deadline for trade sqrt_price_limit_x96 : integer sqrtPriceLimitX96 value referral_code : HexBytes representing ReferralCode . Defaults to 0.","title":"Fields"},{"location":"contracts/#closepositionparams","text":"Used as parameter in pyperp.contracts.ClearingHouse.close_position() function","title":"ClosePositionParams"},{"location":"contracts/#importing_6","text":"from pyperp.contracts.types import ClosePositionParams","title":"Importing"},{"location":"contracts/#fields_1","text":"base_token : base token address sqrt_price_limit_x96 : integer sqrtPriceLimitX96 value opposite_amount_bound : integer OppositeAmountBound value deadline : UNIX time to be used as deadline for trade referral_code : HexBytes representing ReferralCode . Defaults to 0.","title":"Fields"},{"location":"contracts/#addliquidityparams","text":"Used as parameter in pyperp.contracts.ClearingHouse.add_liquidity() function","title":"AddLiquidityParams"},{"location":"contracts/#importing_7","text":"from pyperp.contracts.types import AddLiquidityParams","title":"Importing"},{"location":"contracts/#fields_2","text":"base_token : Contract address of base token base : base amount to add quote : quote amount to add lower_tick : lowerTick value upper_tick : upperTick value min_base : minBase value min_quote : minQuote value deadline : UNIX time to be used as deadline for trade","title":"Fields"},{"location":"contracts/#removeliquidityparams","text":"Used as parameter in pyperp.contracts.ClearingHouse.remove_liquidity() function","title":"RemoveLiquidityParams"},{"location":"contracts/#importing_8","text":"from pyperp.contracts.types import RemoveLiquidityParams","title":"Importing"},{"location":"contracts/#fields_3","text":"base_token : Contract address of base token lower_tick : lowerTick value upper_tick : upperTick value liquidity : integer liquidity value min_base : minBase value min_quote : minQuote value deadline : UNIX time to be used as deadline for trade","title":"Fields"},{"location":"contracts/#marketinfo","text":"Used as return type in pyperp.contracts.MarketRegistry.get_market_info()","title":"MarketInfo"},{"location":"contracts/#importing_9","text":"from pyperp.contracts.types import MarketInfo","title":"Importing"},{"location":"contracts/#fields_4","text":"pool : Pool address exchange_fee_ratio : Exchange Fee ratio uniswap_fee_ratio : Uniswap Fee ratio insurance_fund_fee_ratio : Insurance Fund Fee Ratio","title":"Fields"},{"location":"contracts/#openorderinfo","text":"Used as return type in pyperp.contracts.OrderBook.get_open_order() and pyperp.contracts.OrderBook.get_open_order_by_id()","title":"OpenOrderInfo"},{"location":"contracts/#importing_10","text":"from pyperp.contracts.types import OpenOrderInfo","title":"Importing"},{"location":"contracts/#fields_5","text":"liquidity : Integer liquidity value lower_tick : lowerTick value upper_tick : upperTick value last_fee_growth_inside_x96 : lastFeeGrowthInsideX96 value last_tw_premium_growth_inside_x96 : lastTwPremiumGrowthInsideX96 value last_tw_premium_div_by_sqrt_price_growth_inside_x96 : lastTwPremiumDivBySqrtPriceGrowthInsideX96 value base_debt : Base debt value quote_debt : Quote debt value","title":"Fields"},{"location":"providers/","text":"Providers Providers are objects that encapsulates trader account, RPC endpoints, contract ABIs and metadata. V2 Curie is deployed in three different chains: Arbitrum Rinkeby Optimism Kovan Optimism A Provider class is defined for each of the chains ArbiturmRinkebyProvider The provider class for Arbiturm Rinkeby chain Import from pyperp.providers import ArbitrumRinkebyProvider Properites api : The Web3.HTTPProvider or Web3.WebsocketProvider object that interfaces with an RPC endpoint account : The eth_account.Account object that manages keypair of trader wallet Methods load_meta : This function loads metadata of given contract. Arguments: contract_name : The name of the contract whose metadata is to be loaded. Contract names are case-sensitive Returns: A dict object of the following format: { address: <CONTRACT_ADDRESS> abi: <CONTRACT_ABI> } OptimismKovanProvider The provider class for Optimism Kovan chain Import from pyperp.providers import OptimismKovanProvider Properites api : The Web3.HTTPProvider or Web3.WebsocketProvider object that interfaces with an RPC endpoint account : The eth_account.Account object that manages keypair of trader wallet Methods load_meta : This function loads metadata of given contract. Arguments: contract_name : The name of the contract whose metadata is to be loaded. Contract names are case-sensitive Returns: A dict object of the following format: { address: <CONTRACT_ADDRESS> abi: <CONTRACT_ABI> } Optimism The provider class for Optimism chain Import from pyperp.providers import OptimismProvider Properites api : The Web3.HTTPProvider or Web3.WebsocketProvider object that interfaces with an RPC endpoint account : The eth_account.Account object that manages keypair of trader wallet Methods load_meta : This function loads metadata of given contract. Arguments: contract_name : The name of the contract whose metadata is to be loaded. Contract names are case-sensitive Returns: A dict object of the following format: { address: <CONTRACT_ADDRESS> abi: <CONTRACT_ABI> }","title":"Providers"},{"location":"providers/#providers","text":"Providers are objects that encapsulates trader account, RPC endpoints, contract ABIs and metadata. V2 Curie is deployed in three different chains: Arbitrum Rinkeby Optimism Kovan Optimism A Provider class is defined for each of the chains","title":"Providers"},{"location":"providers/#arbiturmrinkebyprovider","text":"The provider class for Arbiturm Rinkeby chain","title":"ArbiturmRinkebyProvider"},{"location":"providers/#import","text":"from pyperp.providers import ArbitrumRinkebyProvider","title":"Import"},{"location":"providers/#properites","text":"api : The Web3.HTTPProvider or Web3.WebsocketProvider object that interfaces with an RPC endpoint account : The eth_account.Account object that manages keypair of trader wallet","title":"Properites"},{"location":"providers/#methods","text":"load_meta : This function loads metadata of given contract. Arguments: contract_name : The name of the contract whose metadata is to be loaded. Contract names are case-sensitive Returns: A dict object of the following format: { address: <CONTRACT_ADDRESS> abi: <CONTRACT_ABI> }","title":"Methods"},{"location":"providers/#optimismkovanprovider","text":"The provider class for Optimism Kovan chain","title":"OptimismKovanProvider"},{"location":"providers/#import_1","text":"from pyperp.providers import OptimismKovanProvider","title":"Import"},{"location":"providers/#properites_1","text":"api : The Web3.HTTPProvider or Web3.WebsocketProvider object that interfaces with an RPC endpoint account : The eth_account.Account object that manages keypair of trader wallet","title":"Properites"},{"location":"providers/#methods_1","text":"load_meta : This function loads metadata of given contract. Arguments: contract_name : The name of the contract whose metadata is to be loaded. Contract names are case-sensitive Returns: A dict object of the following format: { address: <CONTRACT_ADDRESS> abi: <CONTRACT_ABI> }","title":"Methods"},{"location":"providers/#optimism","text":"The provider class for Optimism chain","title":"Optimism"},{"location":"providers/#import_2","text":"from pyperp.providers import OptimismProvider","title":"Import"},{"location":"providers/#properites_2","text":"api : The Web3.HTTPProvider or Web3.WebsocketProvider object that interfaces with an RPC endpoint account : The eth_account.Account object that manages keypair of trader wallet","title":"Properites"},{"location":"providers/#methods_2","text":"load_meta : This function loads metadata of given contract. Arguments: contract_name : The name of the contract whose metadata is to be loaded. Contract names are case-sensitive Returns: A dict object of the following format: { address: <CONTRACT_ADDRESS> abi: <CONTRACT_ABI> }","title":"Methods"},{"location":"quickstart/","text":"Quickstart This example code is written to demonstrate simple trading on Optimism Kovan. Creating an ApiProvider ApiProvider is a class that wraps the keypair account and HTTP/HTTPS/WSS RPC endpoint provider. It also provides the contract ABIs and metadata from the given network. The following code demonstrates creation of OptimismKovanProvider object which acts as ApiProvider for Optimism Kovan network. from eth_account import Account from pyperp.providers import OptimismKovanProvider account = Account.from_key('<PRIVATE_KEY_HERE>') provider = OptimismKovanProvider( '<RPC_ENDPOINT_URL>', account ) Vault Approve Vault to use USDC In order to open a position, a collateral amount has to be deposited to Vault . To make the deposit, approve Vault to use the USDC tokens in your wallet. from pyperp.contracts import Vault from pyperp.common.types import GasParams gas_params = GasParams( gas=1000000, gas_price=100000 ) vault = Vault(provider) receipt = vault.approve_vault_to_use_usdc( gas_params ) deposit USDC to vault Then, make a deposit by calling Vault.deposit() function. receipt = vault.deposit( vault.usdc.address, 10000000000, gas_params ) Vault.deposit() takes the following positional arguments: token : contract address of collateral token amount : amount of token to deposit gas_params : GasParams object denoting gas paramateres. check how much collateral can be withdrawn print( vault.get_free_collateral( account.address ) ) withdraw from vault receipt = vault.withdraw( vault.usdc.address, <AMOUNT_HERE>, gas_params ) ClearingHouse Open Position You can open a position for either vBTC or vETH. In this example we will open a position for vBTC from pyperp.contracts import ClearingHouse from pyperp.contracts.types import OpenPositionParams from pyperp.commom.utils import getDeadline clearing_house = ClearingHouse(provider) params = OpenPositionParams( base_token = clearing_house.vbtc.address, is_base_to_quote = True, is_exact_input = True, amount = int(0.002*10**18), opposite_amount_bound = 0, deadline = getDeadline(120), #deadline is 120 secs from now sqrt_price_limit_x96 = 0 ) receipt = clearing_house.open_position( params, gas_params ) get account value print( clearing_house.get_account_value(account.address) ) Close Position from pyperp.contract.types import ClosePositionParams params = ClosePositionParams( base_token=clearing_house.vbtc.address, sqrt_price_limit_x96=0, oppposite_amount_bound=0, deadline=getDeadline(120) ) receipt = clearing_house.close_position( params, gas_params )","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"This example code is written to demonstrate simple trading on Optimism Kovan.","title":"Quickstart"},{"location":"quickstart/#creating-an-apiprovider","text":"ApiProvider is a class that wraps the keypair account and HTTP/HTTPS/WSS RPC endpoint provider. It also provides the contract ABIs and metadata from the given network. The following code demonstrates creation of OptimismKovanProvider object which acts as ApiProvider for Optimism Kovan network. from eth_account import Account from pyperp.providers import OptimismKovanProvider account = Account.from_key('<PRIVATE_KEY_HERE>') provider = OptimismKovanProvider( '<RPC_ENDPOINT_URL>', account )","title":"Creating an ApiProvider"},{"location":"quickstart/#vault","text":"","title":"Vault"},{"location":"quickstart/#approve-vault-to-use-usdc","text":"In order to open a position, a collateral amount has to be deposited to Vault . To make the deposit, approve Vault to use the USDC tokens in your wallet. from pyperp.contracts import Vault from pyperp.common.types import GasParams gas_params = GasParams( gas=1000000, gas_price=100000 ) vault = Vault(provider) receipt = vault.approve_vault_to_use_usdc( gas_params )","title":"Approve Vault to use USDC"},{"location":"quickstart/#deposit-usdc-to-vault","text":"Then, make a deposit by calling Vault.deposit() function. receipt = vault.deposit( vault.usdc.address, 10000000000, gas_params ) Vault.deposit() takes the following positional arguments: token : contract address of collateral token amount : amount of token to deposit gas_params : GasParams object denoting gas paramateres.","title":"deposit USDC to vault"},{"location":"quickstart/#check-how-much-collateral-can-be-withdrawn","text":"print( vault.get_free_collateral( account.address ) )","title":"check how much collateral can be withdrawn"},{"location":"quickstart/#withdraw-from-vault","text":"receipt = vault.withdraw( vault.usdc.address, <AMOUNT_HERE>, gas_params )","title":"withdraw from vault"},{"location":"quickstart/#clearinghouse","text":"","title":"ClearingHouse"},{"location":"quickstart/#open-position","text":"You can open a position for either vBTC or vETH. In this example we will open a position for vBTC from pyperp.contracts import ClearingHouse from pyperp.contracts.types import OpenPositionParams from pyperp.commom.utils import getDeadline clearing_house = ClearingHouse(provider) params = OpenPositionParams( base_token = clearing_house.vbtc.address, is_base_to_quote = True, is_exact_input = True, amount = int(0.002*10**18), opposite_amount_bound = 0, deadline = getDeadline(120), #deadline is 120 secs from now sqrt_price_limit_x96 = 0 ) receipt = clearing_house.open_position( params, gas_params )","title":"Open Position"},{"location":"quickstart/#get-account-value","text":"print( clearing_house.get_account_value(account.address) )","title":"get account value"},{"location":"quickstart/#close-position","text":"from pyperp.contract.types import ClosePositionParams params = ClosePositionParams( base_token=clearing_house.vbtc.address, sqrt_price_limit_x96=0, oppposite_amount_bound=0, deadline=getDeadline(120) ) receipt = clearing_house.close_position( params, gas_params )","title":"Close Position"}]}